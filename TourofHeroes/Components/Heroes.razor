@inject IHeroService client;
@inject IMessagingService _messagingService;
@inject NavigationManager NavigationManager
@page "/heroes"
@using Microsoft.VisualBasic.FileIO


@*<h2>@hero.Name.ToUpper() Details</h2>
    <div><span> Id: </span>@hero.Id</div>
    <div><span>name:</span>@hero.Name</div>
    <div>
        <label>Name:</label>
        <input @bind="hero.Name" placeholder="name" />
    </div>*@

@if (heroes == null)
{
    <p><em>Loading......</em></p>
}

else
{
    @*<table class="table">
            <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var hero in heroes)
            {
                <tr>
                    <td>@hero.Id</td>
                    <td>@hero.Name</td>
                </tr>
            }
            </tbody>
        </table>

        <p>Her kommer der lige en til liste</p>*@
    <h2>My Heroes</h2>

    <div>
        <label>Hero Name: 
            <input @bind="HeroName"/></label>
        <!--(click) passes input value to add() and then clears the input-->
        <button @onclick="Add">add</button>
    </div>

    <ul class="heroes">
        @foreach (var hero in heroes)
        {
            <li @onclick="@(() => OnSelect(hero))">
                <span class="badge">@hero.Id</span> @hero.Name
            </li>
            <button class="delete" title="delete hero" @onclick="@(()=> Delete(hero))">x</button>
        }
    </ul>

}

@*<HeroDetail SelectedHero=@selectedHero></HeroDetail>*@


@code {
    //Hero selectedHero;

    private Hero[] heroes;

    //Hero hero = new Hero() { Name = "Windstorm", Id = 1 };

    private string HeroName = "";

    //Hero service:


    protected override async Task OnInitializedAsync()
    {
        //Skal returnere heroservice i stedet for nedenstående:
        //heroes = await Http.GetFromJsonAsync<Hero[]>("sample-data/heroes.json");

        heroes = await client.GetHeroes();

    }

    private async Task OnSelect(Hero hero)
    {
        //selectedHero = hero;
        await _messagingService.Add($"Hero selected {hero.Name}");
        NavigationManager.NavigateTo("/herodetail/" + hero.Name);
    }

    private async Task Add()
    {
        heroes = await client.Add(HeroName);
    }

    private async Task Delete(Hero hero)
    {
        heroes = await client.Delete(hero);
    }
}

<style>
    /* HeroesComponent's private CSS styles */
    .heroes {
        margin: 0 0 2em 0;
        list-style-type: none;
        padding: 0;
        width: 15em;
    }
    .heroes li {
        cursor: pointer;
        position: relative;
        left: 0;
        background-color: #EEE;
        margin: .5em;
        padding: .3em 0;
        height: 1.6em;
        border-radius: 4px;
    }
    .heroes li:hover {
        color: #607D8B;
        background-color: #DDD;
        left: .1em;
    }
    .heroes li.selected {
        background-color: #CFD8DC;
        color: white;
    }
    .heroes li.selected:hover {
        background-color: #BBD8DC;
        color: white;
    }
    .heroes .badge {
        display: inline-block;
        font-size: small;
        color: white;
        padding: 0.8em 0.7em 0 0.7em;
        background-color:#405061;
        line-height: 1em;
        position: relative;
        left: -1px;
        top: -4px;
        height: 1.8em;
        margin-right: .8em;
        border-radius: 4px 0 0 4px;
    }
</style>